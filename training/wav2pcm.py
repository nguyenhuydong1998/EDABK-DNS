# -*- coding: utf-8 -*-
"""wav2pcm_v1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N_kVYcGdqMA49G9P9__tAwpCbP3QZmfo
"""

#from google.colab import drive
#drive.mount('/content/drive')

import numpy as np
from scipy.io import wavfile as wave 
from scipy import signal 
import os
import soundfile
import librosa

"""1. Extract zip file 

"""

# %cd '/content/drive/MyDrive/Dataset/Clean_extract'
# !unzip '/content/drive/MyDrive/Dataset/Clean.zip'

# %cd '/content/drive/MyDrive/Dataset/Noise_extract'
# ! unzip '/content/drive/MyDrive/Dataset/Noise.zip'

"""2. Save path in list"""

#Unzipped clean dataset directory
source_dir = os.path.join('/content/drive/MyDrive/Dataset/Clean_extract')        
print(source_dir)
dir_list = os.listdir(source_dir)
# dir_list: name of folder in source_dir
print(dir_list)
clean_dir=[] # saving path of clean speech 

data56_dir = os.listdir(os.path.join(source_dir, 'clean_trainset_56spk_wav'))
for file in data56_dir:
       clean_path = os.path.join(source_dir, 'clean_trainset_56spk_wav', file)
       clean_dir.append(clean_path)
data28_dir = os.listdir(os.path.join(source_dir, 'clean_trainset_28spk_wav'))
for file in data28_dir:
       clean_path = os.path.join(source_dir, 'clean_trainset_28spk_wav', file)
       clean_dir.append(clean_path)

print((clean_dir))
print(len(clean_dir))

source_dir_1 = os.path.join('/content/drive/MyDrive/Dataset/Noise_extract')
noise_dir=[] # saving path of noise 
noise1_dir = os.listdir(os.path.join(source_dir_1, 'DKITCHEN'))
for file in noise1_dir:
       noise_path = os.path.join(source_dir_1, 'DKITCHEN', file)
       noise_dir.append(noise_path)

noise2_dir = os.listdir(os.path.join(source_dir_1, 'DLIVING'))
for file in noise2_dir:
       noise_path = os.path.join(source_dir_1, 'DLIVING', file)
       noise_dir.append(noise_path)

noise3_dir = os.listdir(os.path.join(source_dir_1, 'DWASHING'))
for file in noise3_dir:
       noise_path = os.path.join(source_dir_1, 'DWASHING', file)
       noise_dir.append(noise_path)

print((noise_dir))
print(len(noise_dir))

"""3. Convert wav to pcm

"""

def float_to_byte(sig):
    # float32 -> int16(PCM_16) -> byte
    return  float2pcm(sig, dtype='int16').tobytes()

def byte_to_float(byte):
    # byte -> int16(PCM_16) -> float32
    return pcm2float(np.frombuffer(byte,dtype=np.int16), dtype='float32')

# this function is to convert float to pcm, we use float32 type because librosa.load() is used to Load an audio file as a floating point time series.
def float2pcm(sig, dtype='int16'):
    """Convert floating point signal with a range from -1 to 1 to PCM.
    Any signal values outside the interval [-1.0, 1.0) are clipped.
    No dithering is used.
    Note that there are different possibilities for scaling floating
    point numbers to PCM numbers, this function implements just one of
    them.  For an overview of alternatives see
    http://blog.bjornroche.com/2009/12/int-float-int-its-jungle-out-there.html
    """
    i = np.iinfo(dtype)
    abs_max = 2 ** (i.bits - 1)
    offset = i.min + abs_max
    return (sig * abs_max + offset).clip(i.min, i.max).astype(dtype)
    

# this function is to convert pcm to float, which is used to check the output files
def pcm2float(sig, dtype='float32'):
    """Convert PCM signal to floating point with a range from -1 to 1.
    Use dtype='float32' for single precision.
    """
    i = np.iinfo(sig.dtype)
    abs_max = 2 ** (i.bits - 1)
    offset = i.min + abs_max
    return (sig.astype(dtype) - offset) / abs_max

"""4. Test wav2pcm function

"""

# test_dir=[] # saving path of clean speech 

# test_dir = os.listdir(os.path.join('/content/drive/MyDrive/Dataset/Test_noi_file'))
# for file in test_dir:
#        test_path = os.path.join('/content/drive/MyDrive/Dataset/Test_noi_file', file)
#        test_dir.append(test_path)
# # save wav file in pcm
# for file in test_dir: 
#   samplerate, data= wave.read(file)
#   y,sr = librosa.load(file,sr=48000)
#   # convert to byte(PCM16)
#   byt = float_to_byte(y)
#   # save to pcm file
#   with open("/content/drive/MyDrive/Dataset/Test.pcm","ab") as f:
#     f.write(byt)
#     #f.close()
#   f.close()

# # read pcm file
# with open("/content/drive/MyDrive/Dataset/Test.pcm","rb") as f:
#   byt = f.read()

# # byte(PCM16) to float32
# f = byte_to_float(byt)

# # save float32 to PCM16 with soundfile
# soundfile.write("/content/drive/MyDrive/Dataset/Test_pcm.wav",f,48000,'PCM_16')

"""5. Making pcm file

"""

# save clean wav file in pcm
for file in clean_dir: 
  samplerate, data= wave.read(file)
  y,sr = librosa.load(file,sr=48000)
  # convert to byte(PCM16)
  byt = float_to_byte(y)
  # save to pcm file
  with open("/content/drive/MyDrive/Clean.pcm","ab") as f:
    f.write(byt)
    #f.close()
  f.close()

# !mv test_clean_pcm.wav drive/MyDrive/pcm_folder

# save noise wav file in pcm
# save clean wav file in pcm
for file in noise_dir: 
  samplerate, data= wave.read(file)
  y,sr = librosa.load(file,sr=48000)
  # convert to byte(PCM16)
  byt = float_to_byte(y)
  # save to pcm file
  with open("/content/drive/MyDrive/Noise.pcm","ab") as f:
    f.write(byt)
    #f.close()
  f.close()
